---
meta:
  environment: cf-arya

  capi_release:
      name: capi

releases:
- name: cf
  version: latest
- name: capi
  version: latest

networks: # Bosh creates these subnets based in warden_networks.rb in cf-release/templates
  - name: cf1
    type: manual
    subnets:
      - range: 10.0.32.0/20
        name: default_unused
        reserved:
          - 10.0.32.2 - 10.0.32.9
        static:
          - 10.0.32.10 - 10.0.32.255
        gateway: 10.0.32.1
        dns:
          - 10.0.0.2 # amazon has only 1 DNS server for the whole VPC at x.x.0.2
        cloud_properties:
          security_groups: (( env_specific.aws.cf1.security_groups ))
          subnet: (( properties.template_only.aws.subnet_ids.cf1 ))

  - name: cf2
    type: manual
    subnets:
      - range: 10.0.80.0/20
        name: default_unused
        reserved:
          - 10.0.80.2 - 10.0.80.9
        static:
          - 10.0.80.10 - 10.0.80.255
        gateway: 10.0.80.1
        dns:
          - 10.0.0.2 # amazon has only 1 DNS server for the whole VPC at x.x.0.2
        cloud_properties:
          security_groups: (( env_specific.aws.cf2.security_groups ))
          subnet: (( properties.template_only.aws.subnet_ids.cf2 ))

resource_pools:
  - name: small_z1
    cloud_properties:
      instance_type: t2.medium
  - name: small_z2
    cloud_properties:
      instance_type: t2.medium

  - name: router_z1
    cloud_properties:
      instance_type: t2.medium
      elbs:
        (( env_specific.aws.router_z1.elbs ))
  - name: router_z2
    cloud_properties:
      instance_type: t2.medium
      elbs:
        (( env_specific.aws.router_z2.elbs ))

jobs:
- name: api_z1
  instances: 1
- name: api_z2
  instances: 0
- name: api_worker_z1
  instances: 1
- name: api_worker_z2
  instances: 0
- name: clock_global
  instances: 1
  resource_pool: small_z1
- name: uaa_z1
  instances: 1
  resource_pool: small_z1
- name: uaa_z2
  instances: 0
  resource_pool: small_z2

- name: loggregator_trafficcontroller_z1
  instances: 1
  resource_pool: small_z1
- name: loggregator_trafficcontroller_z2
  instances: 0
  resource_pool: small_z2
- name: doppler_z1
  instances: 1
  resource_pool: small_z1
- name: doppler_z2
  instances: 0
  resource_pool: small_z2

- name: nats_z1
  instances: 1
- name: nats_z2
  instances: 0
- name: runner_z1
  instances: 1
- name: runner_z2
  instances: 0
- name: hm9000_z1
  instances: 1
- name: hm9000_z2
  instances: 0

- name: etcd_z1
  instances: 1
- name: etcd_z2
  instances: 0
- name: consul_z1
  instances: 1
- name: consul_z2
  instances: 0
- name: postgres_z1
  instances: 1
  networks:
    - name: cf1
      static_ips: 10.0.32.30
- name: router_z1
  instances: 1
- name: router_z2
  instances: 0

- name: acceptance_tests
  resource_pool: xlarge_errand

secrets:
  hm9000: (( merge )) # contains mutual ssl certs for hm9000 to dea communication
  ccdb_admin_password: (( merge )) # required user-defined password
  uaadb_admin_password: (( merge )) # required user-defined password
  app_ssh:
    host_key_fingerprint: (( merge )) # the fingerprint of your app host key
  uaa:
    jwt:
      signing_key: (( merge ))  # a private key. This is most useful if entered using YAML multi-line string syntax.
      verification_key: (( merge )) # the corresponding public key. This is most useful if entered using YAML multi-line string syntax.
    cc:
      client_secret: (( merge )) # UAA 'cc' client secret
    admin:
      client_secret: (( merge )) # UAA 'admin' client secret
    clients:
      datadog-firehose-nozzle:
        secret: (( merge )) # UAA datadog client secret
      login:
        secret: (( merge )) # UAA default login client secret, if no client is defined
      doppler:
        secret: (( merge )) # UAA doppler client secret
      cc-service-dashboards:
        secret: (( merge )) # secret for the service-dashboard client
      cloud_controller_username_lookup:
        secret: (( merge )) # secret for the cc-username-lookup client
      cc_routing:
        secret: (( merge )) # secret for the routing client
      gorouter:
        secret: (( merge )) # secret for the gorouter client
      ssh-proxy:
        secret: (( merge )) # secret for the CF ssh-proxy client
      notifications:
        secret: (( merge )) # secret for the notifications client
      tcp_emitter:
        secret: (( merge )) # secret for the tcp_emitter
      tcp_router:
        secret: (( merge )) # secret for the tcp_router
    scim:
      user: (( merge )) # username for admin UAA user
      password: (( merge )) # password for admin UAA user
  nats:
    password: (( merge )) # your desired NATS password
  cc:
    bulk_api_password: (( merge )) # Password used to access the bulk_api, health_manager uses it to connect to the cc, announced over NATS
    staging_upload_user: (( merge )) # User name used to access internal endpoints of Cloud Controller to upload files when staging
    staging_upload_password: (( merge )) # User's password used to access internal endpoints of Cloud Controller to upload files when staging
    db_encryption_key: (( merge )) # key for encrypting sensitive values in the CC database
    resource_pool:
      resource_directory_key: (( merge )) # S3 key for the bucket holding CC resources (used when uploading app resources)
      cdn:
        uri: (( merge ))
        key_pair_id: (( merge ))
        private_key: (( merge ))
    packages:
      app_package_directory_key: (( merge )) # S3 key for the bucket holding CC packages
    droplets:
      droplet_directory_key: (( merge )) # S3 key for the bucket holding CC droplets
      cdn:
        uri: (( merge ))
        key_pair_id: (( merge ))
        private_key: (( merge ))
    buildpacks:
      buildpack_directory_key: (( merge )) # S3 key for the bucket holding buildpacks
    newrelic:
      license_key: (( merge ))
  router:
    status:
      password: (( merge ))
  logging:
    shared_secret: (( merge ))
  collector:
    datadog:
      api_key: (( merge ))
      application_key: (( merge ))
  syslog_daemon_config:
    address: (( merge )) # syslog server to send logs to on, say, papertrail
    port: (( merge )) # port to send syslogs to
  acceptance_tests:
    admin_user: (( merge ))
    admin_password: (( merge ))
  smoke_tests:
    user: (( merge ))
    password: (( merge ))
  consul:
    encrypt_keys: (( merge )) # A list of passphrases that will be converted into encryption keys, the first key in the list is the active one
    ca_cert: (( merge ))  # PEM-encoded CA certificate
    server_cert: (( merge )) # PEM-encoded server certificate
    server_key: (( merge )) # PEM-encoded server key
    agent_cert: (( merge )) # PEM-encoded agent certificate
    agent_key: (( merge )) # PEM-encoded agent key

env_specific:
  aws:
    cf1:
      security_groups: (( merge )) # an array of security group ids
    cf2:
      security_groups: (( merge )) # an array of security group ids
    router_z1:
      elbs: (( merge )) # an array of ELB ids. ELBs must be created manually.
    router_z2:
      elbs: (( merge )) # an array of ELB ids. ELBs must be created manually.


properties:
  domain: arya.cf-app.com
  ssl:
    skip_cert_verify: true
  system_domain: arya.cf-app.com
  system_domain_organization: pivotal
  app_domains:    # the domain at which cf apps should be hosted
  - arya-app.cf-app.com
  app_ssh:
    host_key_fingerprint: (( secrets.app_ssh.host_key_fingerprint ))

  template_only:
    aws:
      access_key_id: (( merge )) # AWS access key ID
      secret_access_key: (( merge )) # AWS secret access key
      availability_zone: us-east-1a
      availability_zone2: us-east-1c
      subnet_ids:
        cf1: (( merge )) # subnet ID for cf1
        cf2: (( merge )) # subnet ID for cf2

  ccdb:
    db_scheme: postgres
    address: 10.0.32.30
    roles:
    - tag: admin
      name: ccadmin
      password: (( secrets.ccdb_admin_password ))
    databases:
    - tag: cc
      name: ccdb
    port: 5524

  uaadb:
    db_scheme: postgresql
    address: 10.0.32.30
    roles:
    - tag: admin
      name: uaaadmin
      password: (( secrets.uaadb_admin_password ))
    databases:
    - tag: uaa
      name: uaadb
    port: 5524

  databases:
    address: 10.244.0.30
    databases:
    - citext: true
      name: ccdb
      tag: cc
    - citext: true
      name: uaadb
      tag: uaa
    db_scheme: postgres
    port: 5524
    roles:
    - name: ccadmin
      password: (( secrets.ccdb_admin_password ))
      tag: admin
    - name: uaaadmin
      password: (( secrets.uaadb_admin_password ))
      tag: admin

  uaa:
    jwt:
      signing_key: (( secrets.uaa.jwt.signing_key ))
      verification_key: (( secrets.uaa.jwt.verification_key ))
    cc:
      client_secret: (( secrets.uaa.cc.client_secret ))
    admin:
      client_secret: (( secrets.uaa.admin.client_secret ))
    clients:
      datadog-firehose-nozzle:
        access-token-validity: 1209600
        authorized-grant-types: authorization_code,client_credentials,refresh_token
        override: true
        secret: (( secrets.uaa.clients.datadog-firehose-nozzle.secret ))
        scope: openid,oauth.approvals,doppler.firehose
        authorities: oauth.login,doppler.firehose
      login:
        secret: (( secrets.uaa.clients.login.secret ))
      doppler:
        secret: (( secrets.uaa.clients.doppler.secret ))
      cc-service-dashboards:
        authorities: clients.read,clients.write,clients.admin
        authorized-grant-types: client_credentials
        scope: openid,cloud_controller_service_permissions.read
        secret: (( secrets.uaa.clients.cc-service-dashboards.secret ))
      cloud_controller_username_lookup:
        secret: (( secrets.uaa.clients.cloud_controller_username_lookup.secret ))
      cc_routing:
        secret: (( secrets.uaa.clients.cc_routing.secret ))
      gorouter:
        secret: (( secrets.uaa.clients.gorouter.secret ))
      ssh-proxy:
        authorized-grant-types: authorization_code
        autoapprove: true
        override: true
        redirect-uri: /login
        scope: openid,cloud_controller.read,cloud_controller.write,cloud_controller.admin
        secret: (( secrets.uaa.clients.ssh-proxy.secret ))
      notifications:
        secret: (( secrets.uaa.clients.notifications.secret ))
      tcp_emitter:
        secret: (( secrets.uaa.clients.tcp_emitter.secret ))
      tcp_router:
        secret: (( secrets.uaa.clients.tcp_router.secret ))
    scim:
      users:
        - name: (( secrets.uaa.scim.user ))
          password: (( secrets.uaa.scim.password ))
          groups:
            - scim.write
            - scim.read
            - openid
            - cloud_controller.admin
            - doppler.firehose

  nats:
    user: nats
    password: (( secrets.nats.password ))
    monitor_port: 9222
    prof_port: 6060

  cc: &cc
    allow_app_ssh_access: true
    bulk_api_password: (( secrets.cc.bulk_api_password ))
    staging_upload_user: (( secrets.cc.staging_upload_user ))
    staging_upload_password: (( secrets.cc.staging_upload_password ))
    db_encryption_key: (( secrets.cc.db_encryption_key ))
    logging_level: debug2
    default_quota_definition: runaway
    generic:
      number_of_workers: 2
    quota_definitions:
      runaway:
        memory_limit: 102400
        total_services: -1
        total_routes: 1000
        non_basic_services_allowed: true
    default_app_memory: 256
    resource_pool:
      resource_directory_key: (( secrets.cc.resource_pool.resource_directory_key ))
      cdn:
        uri: (( secrets.cc.resource_pool.cdn.uri ))
        key_pair_id: (( secrets.cc.resource_pool.cdn.key_pair_id ))
        private_key: (( secrets.cc.resource_pool.cdn.private_key ))
    packages:
      app_package_directory_key: (( secrets.cc.packages.app_package_directory_key ))
    droplets:
      droplet_directory_key: (( secrets.cc.droplets.droplet_directory_key ))
      cdn:
        uri: (( secrets.cc.droplets.cdn.uri ))
        key_pair_id: (( secrets.cc.droplets.cdn.key_pair_id ))
        private_key: (( secrets.cc.droplets.cdn.private_key ))
    buildpacks:
      buildpack_directory_key: (( secrets.cc.buildpacks.buildpack_directory_key ))
    newrelic:
      license_key: (( secrets.cc.newrelic.license_key ))
      monitor_mode: true
      capture_params: true
      transaction_tracer:
        enabled: true
        record_sql: raw
    security_event_logging:
      enabled: true
    users_can_select_backend: false
    default_to_diego_backend: true

  router:
    status:
      user: router
      password: (( secrets.router.status.password ))

  loggregator_endpoint:
    shared_secret: (( secrets.logging.shared_secret )) # same as metron_endpoint

  metron_endpoint:
    shared_secret: (( secrets.logging.shared_secret )) # same as loggregator_endpoint

  collector:
    deployment_name: (( meta.environment ))
    use_datadog: true
    datadog:
      api_key: (( secrets.collector.datadog.api_key ))
      application_key: (( secrets.collector.datadog.application_key ))

  syslog_daemon_config:
    address: (( secrets.syslog_daemon_config.address )) # syslog server to send logs to on, say, papertrail
    port: (( secrets.syslog_daemon_config.port )) # port to send syslogs to

  acceptance_tests:
    api: (( "api." domain ))
    apps_domain: (( app_domains ))
    admin_user: (( secrets.acceptance_tests.admin_user ))
    admin_password: (( secrets.acceptance_tests.admin_password ))
    backend: diego
    include_sso: true
    include_security_groups: true
    include_services: true
    include_tasks: true
    include_logging: true
    include_v3: true
    include_internet_dependent: true
    include_diego_ssh: true
    include_diego_docker: true
    include_route_services: false
    include_tasks: true
    nodes: 4
    skip_diego_unsupported_tests: true
    skip_ssl_validation: true

  smoke_tests:
    api:  (( "api." domain ))
    apps_domain: (( app_domains ))
    user: (( secrets.smoke_tests.user ))
    password: (( secrets.smoke_tests.password ))
    org: runtime-smoke-tests
    space: runtime-smoke-tests
    use_existing_org: true
    skip_ssl_validation: true

  consul:
    encrypt_keys: (( secrets.consul.encrypt_keys ))
    ca_cert: (( secrets.consul.ca_cert ))
    server_cert: (( secrets.consul.server_cert ))
    server_key: (( secrets.consul.server_key ))
    agent_cert: (( secrets.consul.agent_cert ))
    agent_key: (( secrets.consul.agent_key ))

  hm9000:
    ca_cert: (( secrets.hm9000.ca_cert ))
    server_key: (( secrets.hm9000.server_key ))
    server_cert: (( secrets.hm9000.server_cert ))
    client_key: (( secrets.hm9000.client_key ))
    client_cert: (( secrets.hm9000.client_cert ))
