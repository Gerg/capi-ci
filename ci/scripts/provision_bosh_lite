#!/usr/bin/env bash

set -exu

function setup_env() {
  set +x
  export AWS_ACCESS_KEY_ID
  export AWS_SECRET_ACCESS_KEY

  echo "${SSH_KEY}" > /tmp/bosh_lite_key
  export BOSH_AWS_ACCESS_KEY_ID="${AWS_ACCESS_KEY_ID}"
  export BOSH_AWS_SECRET_ACCESS_KEY="${AWS_SECRET_ACCESS_KEY}"
  set -x

  export BOSH_LITE_SUBNET_ID
  BOSH_LITE_SUBNET_ID=$(aws ec2 describe-subnets --filters "Name=tag:Name,Values=${AWS_SUBNET_NAME}" | jq -r .Subnets[0].SubnetId)

  export BOSH_LITE_SECURITY_GROUP
  BOSH_LITE_SECURITY_GROUP=$(aws ec2 describe-security-groups --filters Name=tag-value,Values=${AWS_SECURITY_GROUP_TAG} | jq -r '.SecurityGroups[0].GroupId')

  export BOSH_LITE_ELASTIC_IP
  BOSH_LITE_ELASTIC_IP=$(aws ec2 describe-addresses --filters 'Name=domain,Values=vpc' | jq -r 'select(.Addresses[].InstanceId == null).Addresses[].PublicIp' | head -1)

  export BOSH_LITE_PRIVATE_KEY=/tmp/bosh_lite_key
}

function hosted_zone_id_from_name() {
  declare zone=$1

  aws route53 list-hosted-zones-by-name --dns-name "${zone}" | jq -r '.HostedZones[0].Id' | cut -d'/' -f3
}

function configure_route53() {
  declare domain=$1 zone_id=$2 ip=$3

  json=$(cat <<JSON
{
  "Comment": "Update name server records",
  "Changes": [
    {
      "Action": "UPSERT",
      "ResourceRecordSet": {
        "Name":"*.${domain}",
        "Type":"A",
        "TTL": 60,
        "ResourceRecords": [
          {"Value":"${ip}"}
        ]
      }
    }
  ]
}
JSON
)

  aws route53 change-resource-record-sets \
    --hosted-zone-id "${zone_id}" \
    --change-batch "${json}"
}

function bosh_lite_director_uuid() {
  declare domain=$1

  curl -sk https://bosh.${domain}:25555/info | jq -r '.uuid'
}

function bosh_lite_ip() {
  declare domain=$1

  dig +short "bosh.${domain}"
}

function bosh_lite_provisioned() {
  declare bosh_target=$1 status
  set +ex
  echo -n "Checking for presence of bosh-lite VM at ${bosh_target}... "
  curl -sk https://bosh.${bosh_target}:25555/info 2>/dev/null
  status=$?
  if [ $status -eq 0 ]; then
    echo "Already exists"
  else
    echo "Does not exist"
  fi
  set -ex

  return ${status}
}

function provision_bosh_lite() {
  pushd bosh-lite

    vagrant up --provider=aws
    BOSH_LITE_IP="$(vagrant ssh-config 2>/dev/null | grep HostName | awk '{print $2}')"

    sleep_time=80
    echo "sleeping ${sleep_time} seconds to allow bosh-director to come online"
    sleep "${sleep_time}"

    bosh -t "${BOSH_LITE_IP}" login admin admin
  popd
}

function write_deployment_files() {
  declare director_uuid=$1 bosh_ip=$2

    cat << EOF > deployments/stub.yml
director_uuid: ${director_uuid}
properties:
  system_domain: ${SYSTEM_DOMAIN}
  apps_domain: ${APP_DOMAIN}
  acceptance_tests:
    backend: diego
    include_sso: true
    include_security_groups: true
    include_services: true
    include_tasks: true
    include_logging: true
    include_v3: true
    include_internet_dependent: true
    include_diego_ssh: true
    include_diego_docker: true
    include_route_services: false
    include_tasks: true
    nodes: 3
    skip_diego_unsupported_tests: true
    skip_ssl_validation: true
  cc:
    security_group_definitions:
      - name: load_balancer
        rules:
        - protocol: all
          destination: ${bosh_ip}

EOF

  echo "${bosh_ip}" > deployments/target

  echo "admin" > bosh-lite-creds/username
  echo "admin" > bosh-lite-creds/password
}

function main() {
  declare system_zone_id app_zone_id director_uuid

  if bosh_lite_provisioned "${SYSTEM_DOMAIN}"; then
    director_uuid="$(bosh_lite_director_uuid "${SYSTEM_DOMAIN}")"
    bosh_ip="$(bosh_lite_ip "${SYSTEM_DOMAIN}")"
    write_deployment_files ${director_uuid} ${bosh_ip}
  else
    setup_env

    system_zone_id="$(hosted_zone_id_from_name "${SYSTEM_DOMAIN}")"
    configure_route53 "${SYSTEM_DOMAIN}" "${system_zone_id}" "${BOSH_LITE_ELASTIC_IP}"

    app_zone_id="$(hosted_zone_id_from_name "${APP_DOMAIN}")"
    configure_route53 "${APP_DOMAIN}" "${app_zone_id}" "${BOSH_LITE_ELASTIC_IP}"

    provision_bosh_lite
    director_uuid="$(bosh_lite_director_uuid "${SYSTEM_DOMAIN}")"
    write_deployment_files "${director_uuid}" "${BOSH_LITE_ELASTIC_IP}"
  fi
}

main
