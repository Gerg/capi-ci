#!/usr/bin/env bash

set -exu

setup_env() {
  set +x
  export AWS_ACCESS_KEY_ID
  export AWS_SECRET_ACCESS_KEY

  echo "${SSH_KEY}" > /tmp/bosh_lite_key
  export BOSH_AWS_ACCESS_KEY_ID="${AWS_ACCESS_KEY_ID}"
  export BOSH_AWS_SECRET_ACCESS_KEY="${AWS_SECRET_ACCESS_KEY}"
  set -x

  export BOSH_LITE_SUBNET_ID
  BOSH_LITE_SUBNET_ID=$(aws ec2 describe-subnets --filters "Name=tag:Name,Values=${AWS_SUBNET_NAME}" | jq -r .Subnets[0].SubnetId)

  export BOSH_LITE_SECURITY_GROUP
  BOSH_LITE_SECURITY_GROUP=$(aws ec2 describe-security-groups --filters Name=tag-value,Values=${AWS_SECURITY_GROUP_TAG} | jq -r '.SecurityGroups[0].GroupId')

  export BOSH_LITE_ELASTIC_IP
  BOSH_LITE_ELASTIC_IP=$(aws ec2 describe-addresses --filters 'Name=domain,Values=vpc' | jq -r 'select(.Addresses[].InstanceId == null).Addresses[].PublicIp' | head -1)

  export BOSH_LITE_PRIVATE_KEY=/tmp/bosh_lite_key
}

provision_bosh_lite() {
  pushd bosh-lite

  BOSH_LITE_INSTANCE_TYPE="m3.2xlarge" vagrant up --provider=aws
  BOSH_LITE_IP="$(vagrant ssh-config 2>/dev/null | grep HostName | awk '{print $2}')"

  sleep_time=80
  echo "sleeping ${sleep_time} seconds to allow bosh-director to come online"
  sleep "${sleep_time}"

  bosh -t "${BOSH_LITE_IP}" login admin admin
  DIRECTOR_UUID=$(bosh -t "${BOSH_LITE_IP}" status --uuid)
  cat << EOF > ../deployments/stub.yml
director_uuid: $DIRECTOR_UUID
properties:
  acceptance_tests:
    nodes: 1
    include_sso: true
    include_operator: true
    include_logging: true
    include_security_groups: true
    include_internet_dependent: true
    include_services: true
  cc:
    security_group_definitions:
      - name: load_balancer
        rules:
        - protocol: all
          destination: ${BOSH_LITE_IP}

EOF

  echo "admin" > ../bosh-lite-creds/username
  echo "admin" > ../bosh-lite-creds/password
  popd
}

main() {
  setup_env
  provision_bosh_lite
}

main
