groups:
- name: capi-release
  jobs:
  - cc-unit-tests
  - bridge-unit-tests
  - create-capi-release
  - bump-capi-release
  - mulan-postgres-webdav-bridge
  - elsa-mysql-s3-bypass
  - kiki-back-compat-migrations
  - bump-ci-passed
- name: ship-it
  jobs:
  - ship-it
  - bump-cc-v2-api
  - bump-cc-v3-api
  - push-github-release
  - merge-capi-release-master
  - publish-docs
  - bump-v2-docs
  - bump-cf-release
- name: dependencies-docs
  jobs:
  - check-cc-dependencies
  - rc-docs
  - update-checkman
  - deliver-stories
- name: bosh
  jobs:
  - update-bosh-arya
  - update-bosh-mulan
  - update-bosh-elsa
  - update-bosh-kiki
- name: mssql
  jobs:
  - update-bosh-ripley
  - mssql-unit-tests
  - ripley-mssql

resource_types:
- name: slack-notification
  type: docker-image
  source:
    repository: cfcommunity/slack-notification-resource
- name: terraform
  type: docker-image
  source:
    repository: ljfranklin/terraform-resource
- name: bosh2-deployment
  type: docker-image
  source:
    repository: cloudfoundry/bosh-deployment-resource
- name: gcs
  type: docker-image
  source:
    repository: frodenas/gcs-resource

resources:

# schedules
- name: weekly-sunday
  type: time
  source:
    location: America/Los_Angeles
    start: 23:00
    stop: 23:30
    days: [Sunday]

- name: deliver-capi-stories
  type: tracker
  source:
    token: {{deliver_capi_tracker_token}}
    project_id: '966314'
    tracker_url: https://www.pivotaltracker.com

- name: gcp-stemcell
  type: bosh-io-stemcell
  source:
    name: bosh-google-kvm-ubuntu-trusty-go_agent

- name: capi-final-releases
  type: s3
  source:
    bucket: capi-final-releases
    regexp: capi-(.*).tgz
    access_key_id: {{wasabi_ci_artifacts_s3_access_key}}
    secret_access_key: {{wasabi_ci_artifacts_s3_secret_key}}

- name: capi-checkman
  type: git
  source:
    branch: master
    private_key: {{private_key}}
    uri: git@github.com:cloudfoundry/capi-checkman.git

- name: capi-ci
  type: git
  source:
    branch: master
    private_key: {{private_key}}
    uri: git@github.com:cloudfoundry/capi-ci.git

- name: capi-ci-private
  type: git
  source:
    branch: master
    private_key: {{private_key}}
    uri: git@github.com:cloudfoundry/capi-ci-private.git

- name: arya-bbl-state
  type: git
  source:
    branch: master
    private_key: {{private_key}}
    uri: git@github.com:cloudfoundry/capi-ci-private.git

- name: capi-release-master
  type: git
  source:
    branch: master
    private_key: {{private_key}}
    uri: git@github.com:cloudfoundry/capi-release.git

- name: capi-release-ci-passed
  type: git
  source:
    branch: ci-passed
    private_key: {{private_key}}
    uri: git@github.com:cloudfoundry/capi-release.git

- name: capi-release-develop
  type: git
  source:
    branch: develop
    private_key: {{private_key}}
    uri: git@github.com:cloudfoundry/capi-release.git

- name: capi-release-tarball
  type: s3
  source:
    bucket: capi-releases
    regexp: capi-(.*)-.*-.*.tgz
    access_key_id: {{wasabi_ci_artifacts_s3_access_key}}
    secret_access_key: {{wasabi_ci_artifacts_s3_secret_key}}

- name: version
  type: semver
  source:
    access_key_id: {{wasabi_ci_artifacts_s3_access_key}}
    secret_access_key: {{wasabi_ci_artifacts_s3_secret_key}}
    initial_version: 0.0.0
    bucket: capi-release-versions
    key: current-capi-release-version
    region_name: us-east-1

- name: version-sql-server
  type: semver
  source:
    access_key_id: {{wasabi_ci_artifacts_s3_access_key}}
    secret_access_key: {{wasabi_ci_artifacts_s3_secret_key}}
    initial_version: 1.25.0
    bucket: capi-release-versions
    key: temporary-capi-release-sql-server-version
    region_name: us-east-1

- name: cc-api-v3-version
  type: semver
  source:
    driver: git
    uri: git@github.com:cloudfoundry/cloud_controller_ng.git
    branch: master
    file: config/version
    git_user: 'CAPI CI <cf-capi-eng+ci@pivotal.io>'
    private_key: {{private_key}}

- name: cc-api-v2-version
  type: semver
  source:
    driver: git
    uri: git@github.com:cloudfoundry/cloud_controller_ng.git
    branch: master
    file: config/version_v2
    git_user: 'CAPI CI <cf-capi-eng+ci@pivotal.io>'
    private_key: {{private_key}}

- name: cc-uploader
  type: git
  source:
    branch: master
    private_key: {{private_key}}
    uri: git@github.com:cloudfoundry/cc-uploader.git

- name: cf-release-develop
  type: git
  source:
    branch: develop
    private_key: {{private_key}}
    uri: git@github.com:cloudfoundry/cf-release.git

- name: github-release
  type: github-release
  source:
    user: cloudfoundry
    repository: capi-release
    drafts: true
    access_token: {{github_access_token}}

- name: cf-release-master
  type: git
  source:
    branch: master
    private_key: {{private_key}}
    uri: git@github.com:cloudfoundry/cf-release.git

- name: cloud_controller_ng
  type: git
  source:
    branch: master
    private_key: {{private_key}}
    uri: git@github.com:cloudfoundry/cloud_controller_ng.git

- name: cloud_controller_ng_sql_server
  type: git
  source:
    branch: pivotal-sqlserversupport
    private_key: {{private_key}}
    uri: git@github.com:cloudfoundry/cloud_controller_ng.git

- name: concourse-config
  type: git
  source:
    paths:
    - wasabi
    ignore_paths:
    - wasabi/deployments/pipeline.yml
    private_key: {{private_key}}
    uri: git@github.com:cloudfoundry/capi-ci-private.git

- name: diego-release
  type: git
  source:
    branch: master
    private_key: {{private_key}}
    uri: git@github.com:cloudfoundry/diego-release.git

- name: nsync
  type: git
  source:
    branch: master
    private_key: {{private_key}}
    uri: git@github.com:cloudfoundry/nsync.git

- name: slack-alert
  type: slack-notification
  source:
    url: {{slack_failure_hook_url}}

- name: stager
  type: git
  source:
    branch: master
    private_key: {{private_key}}
    uri: git@github.com:cloudfoundry/stager.git

- name: sync-integration-tests
  type: git
  source:
    branch: master
    private_key: {{private_key}}
    uri: git@github.com:cloudfoundry/sync-integration-tests.git

- name: tps
  type: git
  source:
    branch: master
    private_key: {{private_key}}
    uri: git@github.com:cloudfoundry/tps.git

- name: cf-deployment
  type: git
  source:
    uri: git@github.com:cloudfoundry/cf-deployment.git
    private_key: {{private_key}}
    branch: release-candidate

- name: cf-deployment-concourse-tasks
  type: git
  source:
    branch: master
    private_key: {{private_key}}
    uri: git@github.com:cloudfoundry/cf-deployment-concourse-tasks.git

- name: cats-concourse-task
  type: git
  source:
    branch: master
    private_key: {{private_key}}
    uri: git@github.com:cloudfoundry/cats-concourse-task.git

- name: cf-acceptance-tests
  type: git
  source:
    branch: master
    private_key: {{private_key}}
    uri: git@github.com:cloudfoundry/cf-acceptance-tests.git

# Ripley resources

- name: ripley-integration-configs
  type: git
  source:
    branch: master
    private_key: {{private_key}}
    uri: git@github.com:cloudfoundry/capi-ci-private.git
    paths: ["ripley/cats_integration_config.json"]

- name: ripley-bbl-state
  type: git
  source:
    branch: master
    private_key: {{private_key}}
    uri: git@github.com:cloudfoundry/capi-ci-private.git
    paths: ["ripley/bbl-state.json"]

- name: azure-terraform
  type: terraform
  source:
    storage:
      bucket: capi-ripley-deployments
      bucket_path: azure
      access_key_id: {{gcp_storage_access_key}}
      secret_access_key: {{gcp_storage_secret_key}}
      endpoint: storage.googleapis.com

- name: ripley-deployment
  type: bosh2-deployment
  source:
    vars_store:
      provider: gcs
      config:
        bucket: {{ripley_bosh_vars_bucket}}
        file_name: &ripley_vars_store_path bosh/vars-store.yml
        json_key: {{ripley_gcp_json_key}}

# Mulan resources
- name: mulan-bbl-state
  type: git
  source:
    branch: master
    private_key: {{private_key}}
    uri: git@github.com:cloudfoundry/capi-ci-private.git

- name: mulan-integration-configs
  type: git
  source:
    branch: master
    private_key: {{private_key}}
    uri: git@github.com:cloudfoundry/capi-ci-private.git

- name: mulan-deployment
  type: bosh2-deployment
  source:
    vars_store:
      provider: gcs
      config:
        bucket: {{mulan_bosh_vars_bucket}}
        file_name: &mulan_vars_store_path "bosh/vars-store.yml"
        json_key: {{mulan_gcp_json_key}}

# Elsa resources
- name: elsa-bbl-state
  type: git
  source:
    branch: master
    private_key: {{private_key}}
    uri: git@github.com:cloudfoundry/capi-ci-private.git

- name: elsa-integration-configs
  type: git
  source:
    branch: master
    private_key: {{private_key}}
    uri: git@github.com:cloudfoundry/capi-ci-private.git

- name: elsa-deployment
  type: bosh2-deployment
  source:
    vars_store:
      provider: gcs
      config:
        bucket: {{elsa_bosh_vars_bucket}}
        file_name: &elsa_vars_store_path "bosh/vars-store.yml"
        json_key: {{elsa_gcp_json_key}}

- name: elsa-aws-storage-terraform
  type: terraform
  source:
    storage:
      bucket: {{elsa_bosh_vars_bucket}}
      bucket_path: aws-storage
      access_key_id: {{gcp_storage_access_key}}
      secret_access_key: {{gcp_storage_secret_key}}
      endpoint: storage.googleapis.com

# Kiki resources
- name: kiki-bbl-state
  type: git
  source:
    branch: master
    private_key: {{private_key}}
    uri: git@github.com:cloudfoundry/capi-ci-private.git

- name: kiki-integration-configs
  type: git
  source:
    branch: master
    private_key: {{private_key}}
    uri: git@github.com:cloudfoundry/capi-ci-private.git

- name: kiki-deployment
  type: bosh2-deployment
  source:
    vars_store:
      provider: gcs
      config:
        bucket: {{kiki_bosh_vars_bucket}}
        file_name: &kiki_vars_store_path "bosh/vars-store.yml"
        json_key: {{kiki_gcp_json_key}}

jobs:

- name: check-cc-dependencies
  serial: true
  plan:
  - aggregate:
    - get: cloud_controller_ng
      trigger: true
    - get: concourse-config
    - get: capi-ci
  - task: check-dependencies
    file: capi-ci/ci/monitoring/cloud_controller_ng_dependencies.yml
    params:
      GEMNASIUM_API_KEY: {{gemnasium_api_key}}

- name: cc-unit-tests
  plan:
  - aggregate:
    - get: cloud_controller_ng
      trigger: true
    - get: capi-ci
  - aggregate:
    - task: run-cc-unit-tests-mysql
      file: capi-ci/ci/test-unit/run_cc_unit_tests.yml
      params:
        DB: mysql
      on_failure:
        put: slack-alert
        params:
          text: '[cc-unit-tests] OH NO! Failed when running with mysql'
          icon_emoji: {{slack_failure_emoji}}
    - task: run-cc-unit-tests-postgres
      file: capi-ci/ci/test-unit/run_cc_unit_tests.yml
      params:
        DB: postgres
      on_failure:
        put: slack-alert
        params:
          text: '[cc-unit-tests] OH NO! Failed when running with postgres'
          icon_emoji: {{slack_failure_emoji}}

- name: bump-capi-release
  plan:
  - aggregate:
    - get: capi-ci
    - get: capi-release
      resource: capi-release-develop
      trigger: true
    - get: cloud_controller_ng
      passed: [cc-unit-tests]
      trigger: true
    - get: diego-release
      passed: [bridge-unit-tests]
      params:
        submodules:
        - src/code.cloudfoundry.org/bbs
    - get: cc-uploader
      passed: [bridge-unit-tests]
      trigger: true
    - get: nsync
      passed: [bridge-unit-tests]
      trigger: true
    - get: stager
      passed: [bridge-unit-tests]
      trigger: true
    - get: tps
      passed: [bridge-unit-tests]
      trigger: true
  - task: bump-capi-release
    file: capi-ci/ci/git/bump_capi_release.yml
  - put: capi-release-develop
    params:
      repository: bumped/capi-release
      rebase: true

- name: bridge-unit-tests
  plan:
  - aggregate:
    - get: capi-release
      resource: capi-release-develop
    - get: cc-uploader
      trigger: true
    - get: nsync
      trigger: true
    - get: stager
      trigger: true
    - get: tps
      trigger: true
    - get: capi-ci
    - get: diego-release
      params:
        submodules:
        - src/code.cloudfoundry.org/bbs
  - task: run-bridge-unit-tests
    file: capi-ci/ci/test-unit/run_bridge_unit_tests.yml

- name: create-capi-release
  serial_groups: [version]
  serial: true
  plan:
  - aggregate:
    - get: capi-release
      resource: capi-release-develop
      passed: [bump-capi-release]
      trigger: true
    - get: capi-ci
    - get: version
      resource: version
      params:
        pre: rc
    - get: cloud_controller_ng
  - put: version
    params:
      file: version/version
    on_failure:
      put: slack-alert
      params:
        text: '[create-capi-release] OH NO! Failed to update version'
        icon_emoji: {{slack_failure_emoji}}
  - task: create-release-tarball
    file: capi-ci/ci/bosh/create_capi_release.yml
    on_failure:
      put: slack-alert
      params:
        text: '[create-capi-release] OH NO! Failed to create tarball'
        icon_emoji: {{slack_failure_emoji}}
  - put: capi-release-tarball
    params:
      file: created-capi-release/capi-*.tgz
    on_failure:
      put: slack-alert
      params:
        text: '[create-capi-release] OH NO! Failed to upload tarball'
        icon_emoji: {{slack_failure_emoji}}

- name: mulan-postgres-webdav-bridge
  serial: true
  serial_groups: [deploy-mulan]
  plan:
  - aggregate:
    - get: cf-deployment-concourse-tasks
    - get: cats-concourse-task
    - get: cf-deployment
      resource: cf-deployment
    - get: capi-release
      resource: capi-release-develop
      passed: [create-capi-release]
    - get: mulan-bbl-state
    - get: mulan-integration-configs
    - get: cf-acceptance-tests
    - get: sync-integration-tests
    - get: capi-ci
    - get: capi-ci-private
    - get: capi-release-tarball
      passed: [create-capi-release]
      trigger: true
  - task: upload-capi-release-tarball
    file: capi-ci/ci/bosh/upload-release.yml
    input_mapping:
      bbl-state: mulan-bbl-state
      release-tarball: capi-release-tarball
    params:
      BBL_STATE_DIR: "mulan"
  - task: mulan-stemcell-upload
    file: cf-deployment-concourse-tasks/bosh-upload-stemcell-from-cf-deployment/task.yml
    input_mapping:
      bbl-state: mulan-bbl-state
    params:
      BBL_STATE_DIR: "mulan"
  - task: extract-bbl-environment
    file: capi-ci/ci/bbl-tasks/extract_bbl_environment.yml
    params:
      ENV_NAME: mulan
  - put: mulan-deployment
    params:
      source_file: environment/metadata
      manifest: cf-deployment/cf-deployment.yml
      vars:
        system_domain: *mulan-domain
        prometheus_password: {{prometheus_password}}
        syslog_remote_address: {{mulan_syslog_remote_address}}
        syslog_remote_port: {{mulan_syslog_remote_port}}
      vars_files:
      - environment/metadata # used by prometheus bosh exporter
      ops_files:
      - cf-deployment/operations/test/add-persistent-isolation-segment-diego-cell.yml
      - capi-ci/cf-deployment-operations/skip-cert-verify.yml
      - capi-ci/cf-deployment-operations/use-latest-capi.yml
      - cf-deployment/operations/scale-to-one-az.yml
      - capi-ci/cf-deployment-operations/scale-cells-to-two.yml
      - cf-deployment/operations/experimental/locket.yml
      - cf-deployment/operations/use-postgres.yml
      - cf-deployment/operations/experimental/locket-postgres.yml
      - capi-ci/cf-deployment-operations/add-prometheus.yml
      - capi-ci/cf-deployment-operations/add-prometheus-capi-homepage.yml
      - capi-ci/cf-deployment-operations/add-remote-syslog.yml
  - task: download-vars-store
    output_mapping:
      destination-directory: mulan-deployment-vars
    file: capi-ci/ci/gcs/download-from-gcs.yml
    params:
      GCP_JSON_KEY: {{mulan_gcp_json_key}}
      GCP_BUCKET: {{mulan_bosh_vars_bucket}}
      GCP_PATH: bosh
  - task: updated-integration-configs
    file: cf-deployment-concourse-tasks/update-integration-configs/task.yml
    input_mapping:
      vars-store: mulan-deployment-vars
      integration-configs: mulan-integration-configs
    params:
      CATS_INTEGRATION_CONFIG_FILE: "mulan/cats_integration_config.json"
      VARS_STORE_FILE: "vars-store.yml"
      SYSTEM_DOMAIN: *mulan-domain
    ensure:
      put: mulan-integration-configs
      params:
        repository: updated-integration-configs
        rebase: true
  - task: enable-feature-flags
    file: cf-deployment-concourse-tasks/set-feature-flags/task.yml
    input_mapping:
      vars-store: mulan-deployment-vars
    params:
      SYSTEM_DOMAIN: *mulan-domain
      VARS_STORE_FILE: "vars-store.yml"
  - aggregate:
    - task: acceptance-tests
      file: cats-concourse-task/task.yml
      input_mapping:
        integration-config: updated-integration-configs
      params:
        NODES: 6
        CONFIG_FILE_PATH: "mulan/cats_integration_config.json"
    - task: sync-integration-tests
      file: sync-integration-tests/concourse/task_with_vars_store.yml
      input_mapping:
        environment: capi-ci-private
        vars-store: mulan-deployment-vars
      params:
        BOSH_DEPLOYMENT_NAME: cf
        BOSH_API_INSTANCE: api/0
        CF_API_TARGET: https://api.mulan.capi.land
        CF_SKIP_SSL_VALIDATION: true
        CF_APPS_DOMAIN: *mulan-domain
        BBL_STATE_DIR: mulan
        VARS_STORE_PATH: "vars-store.yml"
        USE_CF_DEPLOYMENT_VARS: "true"

- name: elsa-mysql-s3-bypass
  serial: true
  serial_groups: [deploy-elsa]
  plan:
  - aggregate:
    - get: cf-deployment-concourse-tasks
    - get: cats-concourse-task
    - get: cf-deployment
      resource: cf-deployment
    - get: capi-release
      resource: capi-release-develop
      passed: [create-capi-release]
    - get: elsa-bbl-state
    - get: elsa-integration-configs
    - get: cf-acceptance-tests
    - get: sync-integration-tests
    - get: capi-ci
    - get: capi-ci-private
    - get: capi-release-tarball
      passed: [create-capi-release]
      trigger: true
  - task: upload-capi-release-tarball
    file: capi-ci/ci/bosh/upload-release.yml
    input_mapping:
      bbl-state: elsa-bbl-state
      release-tarball: capi-release-tarball
    params:
      BBL_STATE_DIR: "elsa"
  - task: elsa-stemcell-upload
    file: cf-deployment-concourse-tasks/bosh-upload-stemcell-from-cf-deployment/task.yml
    input_mapping:
      bbl-state: elsa-bbl-state
    params:
      BBL_STATE_DIR: "elsa"
  - task: extract-bbl-environment
    file: capi-ci/ci/bbl-tasks/extract_bbl_environment.yml
    params:
      ENV_NAME: elsa
  - put: elsa-aws-storage-terraform
    params:
      env_name: elsa
      terraform_source: capi-ci/terraform/aws-s3-buckets/
      vars:
        aws_access_key: {{wasabi_aws_access_key}}
        aws_secret_key: {{wasabi_aws_secret_key}}
        cdn_key_pair_id: {{wasabi_cdn_key_pair_id}}
        cdn_private_key: {{wasabi_cdn_private_key}}
  - put: elsa-deployment
    params:
      source_file: environment/metadata
      manifest: cf-deployment/cf-deployment.yml
      vars:
        system_domain: *elsa-domain
        datadog_api_key: {{elsa_datadog_api_key}}
        datadog_metric_prefix: "datadog.nozzle."
        new_relic_license_key: {{new_relic_license_key}}
        syslog_remote_address: {{elsa_syslog_remote_address}}
        syslog_remote_port: {{elsa_syslog_remote_port}}
        prometheus_password: {{prometheus_password}}
      vars_files:
        - elsa-aws-storage-terraform/metadata
        - environment/metadata # used by prometheus bosh exporter
      ops_files:
      - cf-deployment/operations/test/add-persistent-isolation-segment-diego-cell.yml
      - cf-deployment/operations/tcp-routing-gcp.yml
      - capi-ci/cf-deployment-operations/skip-cert-verify.yml
      - capi-ci/cf-deployment-operations/use-latest-capi.yml
      - capi-ci/cf-deployment-operations/bypass-cc-bridge.yml
      - capi-ci/cf-deployment-operations/use-s3-and-cdn-storage.yml
      - capi-ci/cf-deployment-operations/use-clustered-mysql.yml
      - capi-ci/cf-deployment-operations/add-datadog-firehose-nozzle-gcp.yml
      - capi-ci/cf-deployment-operations/add-new-relic.yml
      - capi-ci/cf-deployment-operations/add-remote-syslog.yml
      - capi-ci/cf-deployment-operations/add-prometheus.yml
      - capi-ci/cf-deployment-operations/add-prometheus-capi-homepage.yml
  - task: download-vars-store
    output_mapping:
      destination-directory: elsa-deployment-vars
    file: capi-ci/ci/gcs/download-from-gcs.yml
    params:
      GCP_JSON_KEY: {{elsa_gcp_json_key}}
      GCP_BUCKET: {{elsa_bosh_vars_bucket}}
      GCP_PATH: bosh
  - task: updated-integration-configs
    file: cf-deployment-concourse-tasks/update-integration-configs/task.yml
    input_mapping:
      vars-store: elsa-deployment-vars
      integration-configs: elsa-integration-configs
    params:
      CATS_INTEGRATION_CONFIG_FILE: "elsa/cats_integration_config.json"
      VARS_STORE_FILE: "vars-store.yml"
      SYSTEM_DOMAIN: *elsa-domain
    ensure:
      put: elsa-integration-configs
      params:
        repository: updated-integration-configs
        rebase: true
  - task: enable-feature-flags
    file: cf-deployment-concourse-tasks/set-feature-flags/task.yml
    input_mapping:
      vars-store: elsa-deployment-vars
    params:
      SYSTEM_DOMAIN: *elsa-domain
      VARS_STORE_FILE: "vars-store.yml"
  - aggregate:
    - task: acceptance-tests
      file: cats-concourse-task/task.yml
      input_mapping:
        integration-config: updated-integration-configs
      params:
        NODES: 6
        CONFIG_FILE_PATH: "elsa/cats_integration_config.json"
    - task: sync-integration-tests
      file: sync-integration-tests/concourse/task_with_vars_store.yml
      input_mapping:
        environment: capi-ci-private
        vars-store: elsa-deployment-vars
      params:
        BOSH_DEPLOYMENT_NAME: cf
        BOSH_API_INSTANCE: api/0
        CF_API_TARGET: https://api.elsa.capi.land
        CF_SKIP_SSL_VALIDATION: true
        CF_APPS_DOMAIN: *elsa-domain
        BBL_STATE_DIR: elsa
        VARS_STORE_PATH: "vars-store.yml"
        USE_CF_DEPLOYMENT_VARS: "true"

- name: kiki-back-compat-migrations
  serial: true
  serial_groups: [deploy-kiki]
  plan:
  - aggregate:
    - get: cloud_controller_ng
    - get: cf-deployment-concourse-tasks
    - get: cats-concourse-task
    - get: cf-deployment
      resource: cf-deployment
    - get: kiki-bbl-state
    - get: kiki-integration-configs
    - get: sync-integration-tests
    - get: capi-ci
    - get: capi-ci-private
    - get: cf-release
      resource: cf-release-master
    - get: capi-release
      resource: capi-release-develop
      passed: [create-capi-release]
    - get: capi-release-tarball
      passed: [create-capi-release]
      trigger: true
  - task: kiki-stemcell-upload
    file: cf-deployment-concourse-tasks/bosh-upload-stemcell-from-cf-deployment/task.yml
    input_mapping:
      bbl-state: kiki-bbl-state
    params:
      BBL_STATE_DIR: "kiki"
  - task: extract-bbl-environment
    file: capi-ci/ci/bbl-tasks/extract_bbl_environment.yml
    params:
      ENV_NAME: kiki
  - task: delete-deployment
    file: capi-ci/ci/bosh/run_bosh_cmd.yml
    params:
      BOSH_ARGS: "delete-deployment -d cf"
  - task: create-capi-release
    file: capi-ci/ci/bosh/create_capi_release_from_cf_release.yml
  - put: kiki-deployment
    params:
      source_file: environment/metadata
      manifest: cf-deployment/cf-deployment.yml
      vars:
        system_domain: *kiki-domain
        syslog_remote_address: {{kiki_syslog_remote_address}}
        syslog_remote_port: {{kiki_syslog_remote_port}}
      ops_files:
      - cf-deployment/operations/test/add-persistent-isolation-segment-diego-cell.yml
      - capi-ci/cf-deployment-operations/skip-cert-verify.yml
      - capi-ci/cf-deployment-operations/use-latest-capi.yml
      - cf-deployment/operations/scale-to-one-az.yml
      - capi-ci/cf-deployment-operations/scale-cells-to-two.yml
      - cf-deployment/operations/use-postgres.yml
      - capi-ci/cf-deployment-operations/add-remote-syslog.yml
  - task: apply-cc-migrations
    file: capi-ci/ci/migrations/apply_latest_migrations.yml
  - task: download-vars-store
    output_mapping:
      destination-directory: kiki-deployment-vars
    file: capi-ci/ci/gcs/download-from-gcs.yml
    params:
      GCP_JSON_KEY: {{kiki_gcp_json_key}}
      GCP_BUCKET: {{kiki_bosh_vars_bucket}}
      GCP_PATH: bosh
  - task: updated-integration-configs
    file: cf-deployment-concourse-tasks/update-integration-configs/task.yml
    input_mapping:
      vars-store: kiki-deployment-vars
      integration-configs: kiki-integration-configs
    params:
      CATS_INTEGRATION_CONFIG_FILE: "kiki/cats_integration_config.json"
      SYSTEM_DOMAIN: *kiki-domain
      VARS_STORE_FILE: "vars-store.yml"
    ensure:
      put: kiki-integration-configs
      params:
        repository: updated-integration-configs
        rebase: true
  - task: enable-feature-flags
    file: cf-deployment-concourse-tasks/set-feature-flags/task.yml
    input_mapping:
      vars-store: kiki-deployment-vars
    params:
      SYSTEM_DOMAIN: *kiki-domain
      VARS_STORE_FILE: "vars-store.yml"
  - task: cats-from-cf-release
    file: cats-concourse-task/cats-from-cf-release/task.yml
  - aggregate:
    - task: acceptance-tests
      file: cats-concourse-task/task.yml
      input_mapping:
        integration-config: updated-integration-configs
      params:
        NODES: 6
        CONFIG_FILE_PATH: "kiki/cats_integration_config.json"
    - task: sync-integration-tests
      file: sync-integration-tests/concourse/task_with_vars_store.yml
      input_mapping:
        environment: capi-ci-private
        vars-store: kiki-deployment-vars
      params:
        BOSH_DEPLOYMENT_NAME: cf
        BOSH_API_INSTANCE: api/0
        CF_API_TARGET: https://api.kiki.capi.land
        CF_SKIP_SSL_VALIDATION: true
        CF_APPS_DOMAIN: *kiki-domain
        BBL_STATE_DIR: kiki
        VARS_STORE_PATH: "vars-store.yml"
        USE_CF_DEPLOYMENT_VARS: "true"
  - task: delete-deployment
    file: capi-ci/ci/bosh/run_bosh_cmd.yml
    params:
      BOSH_ARGS: "delete-deployment -d cf"

- name: ship-it
  serial_groups: [version]
  plan:
  - aggregate:
    - get: capi-ci
    - get: capi-ci-private
    - get: capi-release
      resource: capi-release-ci-passed
      passed: [bump-ci-passed]
    - get: capi-release-tarball
      passed: [bump-ci-passed]
    - get: version
      params: {bump: final}
  - put: version
    params: {file: version/version}
  - task: finalize-release
    file: capi-ci/ci/bosh/finalize-release.yml
  - put: capi-final-releases
    params:
      file: finalized-release/capi-*.tgz
  - put: capi-release
    resource: capi-release-master
    params:
      repository: finalized-release/capi-release
      tag: version/version
  - put: version
    params:
      bump: minor
  - task: block
    config:
      platform: linux
      image_resource:
        type: docker-image
        source: {repository: ubuntu}
      run:
        path: echo
        args: ["Way to go, Zach!"]

- name: push-github-release
  serial_groups: [version]
  plan:
  - aggregate:
    - get: capi-ci
    - get: capi-release
      resource: capi-release-master
      passed: [ship-it]
    - get: capi-final-releases
      passed: [ship-it]
      trigger: true
  - task: generate-github-release
    file: capi-ci/ci/git/generate_github_release.yml
  - put: github-release
    params:
      commitish: generated-release/commitish
      name: generated-release/name
      tag: generated-release/version
      globs:
      - generated-release/*.tgz

- name: bump-cf-release
  serial: true
  plan:
  - aggregate:
    - get: capi-ci
    - get: capi-release
      resource: capi-release-master
      trigger: true
      passed: [ship-it]
    - get: cf-release
      resource: cf-release-develop
      params:
        submodules:
        - src/capi-release
  - task: bump-cf-release
    file: capi-ci/ci/git/bump_cf_release.yml
  - put: cf-release-develop
    params:
      repository: bumped/cf-release
      rebase: true

- name: rc-docs
  serial: true
  plan:
  - aggregate:
    - get: capi-ci
    - get: capi-release
      resource: capi-release-ci-passed
      trigger: true
      params:
        submodules:
          - src/cloud_controller_ng
  - task: push-rc-docs
    file: capi-ci/ci/docs/push_rc_docs.yml
    params: &docs-aws-account
      AWS_DEFAULT_REGION: us-east-1
      AWS_ACCESS_KEY_ID: {{docs_s3_access_key}}
      AWS_SECRET_ACCESS_KEY: {{docs_s3_secret_key}}
      GITHUB_PUSH_KEY: {{private_key}}
    on_failure:
      put: slack-alert
      params:
        text: '[rc-docs] OH NO! Failed to update documentation https://capi.ci.cf-app.com/?groups=migrations-dependencies-docs'
        icon_emoji: {{slack_failure_emoji}}

- name: bump-cc-v3-api
  serial: true
  plan:
  - aggregate:
    # we are using version as an input to gate on ship-it using a cheap to get resource
    # it is not actually a necessary input for this job
    - get: version
      passed: [ship-it]
      trigger: true
    - get: cc-api-v3-version
  - put: cc-api-v3-version
    params:
      bump: minor

- name: bump-cc-v2-api
  serial: true
  plan:
  - aggregate:
    # we are using version as an input to gate on ship-it using a cheap to get resource
    # it is not actually a necessary input for this job
    - get: version
      passed: [ship-it]
      trigger: true
    - get: cc-api-v2-version
  - put: cc-api-v2-version
    params:
      bump: minor

- name: bump-v2-docs
  serial: true
  plan:
  - aggregate:
    - get: capi-ci
    - get: cc-api-v2-version
      trigger: true
      passed: [bump-cc-v2-api]
    - get: cloud_controller_ng
  - task: bump-v2-docs
    file: capi-ci/ci/docs/bump_v2_docs_api_version.yml
  - put: cloud_controller_ng
    params:
      repository: cloud_controller_ng_bumped_docs/cloud_controller_ng
      rebase: true

- name: publish-docs
  serial: true
  plan:
  - aggregate:
    - get: capi-ci
    - get: capi-release
      resource: capi-release-master
      trigger: true
      passed: [ship-it]
      params:
        submodules:
          - src/cloud_controller_ng
  - task: push-docs
    file: capi-ci/ci/docs/push_docs.yml
    params:
      GITHUB_PUSH_KEY: {{private_key}}
    on_failure:
      put: slack-alert
      params:
        text: '[publish-docs] OH NO! Failed to update documentation https://capi.ci.cf-app.com/?groups=migrations-dependencies-docs'
        icon_emoji: {{slack_failure_emoji}}

- name: update-checkman
  plan:
    - aggregate:
      - get: capi-ci
        trigger: true
      - get: capi-checkman
    - task: update-checkman
      file: capi-ci/ci/monitoring/update_checkman.yml
      params:
        IGNORED_JOBS: "ripley-mssql"
      on_success:
        put: slack-alert
        params:
          text: '[update-checkman] Checkman configuration successfully updated'
          icon_emoji: ':capi:'
      on_failure:
        put: slack-alert
        params:
          text: '[update-checkman] OH NO! There was a problem updating configuration! https://capi.ci.cf-app.com/?groups=migrations-dependencies-docs'
          icon_emoji: {{slack_failure_emoji}}
    - put: capi-checkman
      params:
        repository: updated-capi-checkman
        rebase: true

- name: update-bosh-arya
  serial: true
  plan:
    - aggregate:
      - get: cf-deployment-concourse-tasks
      - get: arya-bbl-state
      - get: capi-ci
      - get: capi-ci-private
      - get: weekly-sunday
    - task: seed-capi-ci-private
      file: capi-ci/ci/setup-environment/seed.yml
      params:
        ENVIRONMENT: arya
        DOMAIN: &arya-domain "arya.capi.land"
    - put: capi-ci-private
      params:
        repository: updated-capi-ci-private
        rebase: true
    - task: update-bosh-arya
      file: cf-deployment-concourse-tasks/bbl-up/task.yml
      input_mapping:
        bbl-state: updated-capi-ci-private
      params:
        BBL_STATE_DIR: "arya"
        BBL_IAAS: "gcp"
        BBL_LB_CERT: "certs/load-balancer/server.crt"
        BBL_LB_KEY: "certs/load-balancer/server.key"
        LB_DOMAIN: *arya-domain
        BBL_ENV_NAME: "arya"
        BBL_GCP_SERVICE_ACCOUNT_KEY: {{arya_gcp_json_key}}
        BBL_GCP_PROJECT_ID: {{arya_gcp_project_id}}
        BBL_GCP_ZONE: {{arya_gcp_zone}}
        BBL_GCP_REGION: {{arya_gcp_region}}
      ensure:
        put: arya-bbl-state
        params:
          repository: updated-bbl-state
          rebase: true
    - task: create-dns-record
      file: capi-ci/ci/bbl-tasks/create-dns-record.yml
      input_mapping:
       bbl-state: updated-bbl-state
      params:
        BBL_STATE_DIR: "arya"
        DNS_DOMAIN: *arya-domain
        GCP_DNS_SERVICE_ACCOUNT_KEY: {{dns_gcp_json_key}}
        GCP_PROJECT_ID: {{dns_gcp_project_id}}
        SHARED_DNS_ZONE_NAME: "capi-land"
    - task: run-bosh-cleanup
      file: capi-ci/ci/bbl-tasks/run-bosh-cleanup.yml
      input_mapping:
        bbl-state: updated-bbl-state
      params:
        BBL_STATE_DIR: "arya"

- name: update-bosh-mulan
  serial: true
  serial_groups: [deploy-mulan]
  plan:
    - aggregate:
      - get: cf-deployment-concourse-tasks
      - get: mulan-bbl-state
      - get: capi-ci
      - get: capi-ci-private
      - get: weekly-sunday
    - task: seed-capi-ci-private
      file: capi-ci/ci/setup-environment/seed.yml
      params:
        ENVIRONMENT: mulan
        DOMAIN: &mulan-domain "mulan.capi.land"
    - put: capi-ci-private
      params:
        repository: updated-capi-ci-private
        rebase: true
    - task: update-bosh-mulan
      file: cf-deployment-concourse-tasks/bbl-up/task.yml
      input_mapping:
        bbl-state: updated-capi-ci-private
      params:
        BBL_STATE_DIR: "mulan"
        BBL_IAAS: "gcp"
        BBL_LB_CERT: "certs/load-balancer/server.crt"
        BBL_LB_KEY: "certs/load-balancer/server.key"
        LB_DOMAIN: *mulan-domain
        BBL_ENV_NAME: "mulan"
        BBL_GCP_SERVICE_ACCOUNT_KEY: {{mulan_gcp_json_key}}
        BBL_GCP_PROJECT_ID: {{mulan_gcp_project_id}}
        BBL_GCP_ZONE: {{mulan_gcp_zone}}
        BBL_GCP_REGION: {{mulan_gcp_region}}
      ensure:
        put: mulan-bbl-state
        params:
          repository: updated-bbl-state
          rebase: true
    - task: create-dns-record
      file: capi-ci/ci/bbl-tasks/create-dns-record.yml
      input_mapping:
       bbl-state: updated-bbl-state
      params:
        BBL_STATE_DIR: "mulan"
        DNS_DOMAIN: *mulan-domain
        GCP_DNS_SERVICE_ACCOUNT_KEY: {{dns_gcp_json_key}}
        GCP_PROJECT_ID: {{dns_gcp_project_id}}
        SHARED_DNS_ZONE_NAME: "capi-land"
    - task: run-bosh-cleanup
      file: capi-ci/ci/bbl-tasks/run-bosh-cleanup.yml
      input_mapping:
        bbl-state: updated-bbl-state
      params:
        BBL_STATE_DIR: "mulan"

- name: update-bosh-elsa
  serial: true
  serial_groups: [deploy-elsa]
  plan:
    - aggregate:
      - get: cf-deployment-concourse-tasks
      - get: elsa-bbl-state
      - get: capi-ci
      - get: capi-ci-private
      - get: weekly-sunday
        trigger: true
    - task: seed-capi-ci-private
      file: capi-ci/ci/setup-environment/seed.yml
      params:
        ENVIRONMENT: elsa
        DOMAIN:   &elsa-domain "elsa.capi.land"
    - put: capi-ci-private
      params:
        repository: updated-capi-ci-private
        rebase: true
    - task: update-bosh-elsa
      file: cf-deployment-concourse-tasks/bbl-up/task.yml
      input_mapping:
        bbl-state: updated-capi-ci-private
      params:
        BBL_STATE_DIR: "elsa"
        BBL_IAAS: "gcp"
        BBL_LB_CERT: "certs/load-balancer/server.crt"
        BBL_LB_KEY: "certs/load-balancer/server.key"
        LB_DOMAIN: *elsa-domain
        BBL_ENV_NAME: "elsa"
        BBL_GCP_SERVICE_ACCOUNT_KEY: {{elsa_gcp_json_key}}
        BBL_GCP_PROJECT_ID: {{elsa_gcp_project_id}}
        BBL_GCP_ZONE: {{elsa_gcp_zone}}
        BBL_GCP_REGION: {{elsa_gcp_region}}
      ensure:
        put: elsa-bbl-state
        params:
          repository: updated-bbl-state
          rebase: true
    - task: create-dns-record
      file: capi-ci/ci/bbl-tasks/create-dns-record.yml
      input_mapping:
       bbl-state: updated-bbl-state
      params:
        BBL_STATE_DIR: "elsa"
        DNS_DOMAIN: *elsa-domain
        GCP_DNS_SERVICE_ACCOUNT_KEY: {{dns_gcp_json_key}}
        GCP_PROJECT_ID: {{dns_gcp_project_id}}
        SHARED_DNS_ZONE_NAME: "capi-land"
    - task: run-bosh-cleanup
      file: capi-ci/ci/bbl-tasks/run-bosh-cleanup.yml
      input_mapping:
        bbl-state: updated-bbl-state
      params:
        BBL_STATE_DIR: "elsa"

- name: update-bosh-kiki
  serial: true
  serial_groups: [deploy-kiki]
  plan:
    - aggregate:
      - get: cf-deployment-concourse-tasks
      - get: capi-ci
      - get: capi-ci-private
      - get: weekly-sunday
        trigger: true
    - task: seed-capi-ci-private
      file: capi-ci/ci/setup-environment/seed.yml
      params:
        ENVIRONMENT: kiki
        DOMAIN: &kiki-domain "kiki.capi.land"
    - put: capi-ci-private
      params:
        repository: updated-capi-ci-private
        rebase: true
    - task: update-bosh-kiki
      file: cf-deployment-concourse-tasks/bbl-up/task.yml
      input_mapping:
        bbl-state: updated-capi-ci-private
      params:
        BBL_STATE_DIR: "kiki"
        BBL_IAAS: "gcp"
        BBL_LB_CERT: "certs/load-balancer/server.crt"
        BBL_LB_KEY: "certs/load-balancer/server.key"
        LB_DOMAIN: *kiki-domain
        BBL_ENV_NAME: "kiki"
        BBL_GCP_SERVICE_ACCOUNT_KEY: {{kiki_gcp_json_key}}
        BBL_GCP_PROJECT_ID: {{kiki_gcp_project_id}}
        BBL_GCP_ZONE: {{kiki_gcp_zone}}
        BBL_GCP_REGION: {{kiki_gcp_region}}
      ensure:
        put: kiki-bbl-state
        params:
          repository: updated-bbl-state
          rebase: true
    - task: create-dns-record
      file: capi-ci/ci/bbl-tasks/create-dns-record.yml
      input_mapping:
        bbl-state: updated-bbl-state
      params:
        BBL_STATE_DIR: "kiki"
        DNS_DOMAIN: *kiki-domain
        GCP_DNS_SERVICE_ACCOUNT_KEY: {{dns_gcp_json_key}}
        GCP_PROJECT_ID: {{dns_gcp_project_id}}
        SHARED_DNS_ZONE_NAME: "capi-land"
    - task: run-bosh-cleanup
      file: capi-ci/ci/bbl-tasks/run-bosh-cleanup.yml
      input_mapping:
        bbl-state: updated-bbl-state
      params:
        BBL_STATE_DIR: "kiki"

- name: update-bosh-ripley
  serial: true
  serial_groups: [deploy-ripley]
  plan:
    - aggregate:
      - get: cf-deployment-concourse-tasks
      - get: ripley-bbl-state
      - get: capi-ci
      - get: capi-ci-private
      - get: weekly-sunday
    - task: seed-capi-ci-private
      file: capi-ci/ci/setup-environment/seed.yml
      params:
        ENVIRONMENT: ripley
        DOMAIN: &ripley-domain "ripley.capi.land"
    - put: capi-ci-private
      params:
        repository: updated-capi-ci-private
        rebase: true
    - task: update-bosh-ripley
      file: cf-deployment-concourse-tasks/bbl-up/task.yml
      input_mapping:
        bbl-state: updated-capi-ci-private
      params:
        BBL_STATE_DIR: "ripley"
        BBL_IAAS: "gcp"
        BBL_LB_CERT: "certs/load-balancer/server.crt"
        BBL_LB_KEY: "certs/load-balancer/server.key"
        LB_DOMAIN: *ripley-domain
        BBL_ENV_NAME: "ripley"
        BBL_GCP_SERVICE_ACCOUNT_KEY: {{ripley_gcp_json_key}}
        BBL_GCP_PROJECT_ID: {{ripley_gcp_project_id}}
        BBL_GCP_ZONE: {{ripley_gcp_zone}}
        BBL_GCP_REGION: {{ripley_gcp_region}}
      ensure:
        put: ripley-bbl-state
        params:
          repository: updated-bbl-state
          rebase: true
    - task: create-dns-record
      file: capi-ci/ci/bbl-tasks/create-dns-record.yml
      input_mapping:
        bbl-state: updated-bbl-state
      params:
        BBL_STATE_DIR: "ripley"
        DNS_DOMAIN: *ripley-domain
        GCP_DNS_SERVICE_ACCOUNT_KEY: {{dns_gcp_json_key}}
        GCP_PROJECT_ID: {{dns_gcp_project_id}}
        SHARED_DNS_ZONE_NAME: "capi-land"
    - task: run-bosh-cleanup
      file: capi-ci/ci/bbl-tasks/run-bosh-cleanup.yml
      input_mapping:
        bbl-state: ripley-bbl-state
      params:
        BBL_STATE_DIR: "ripley"

- name: deliver-stories
  serial: true
  plan:
    - get: capi-release
      resource: capi-release-ci-passed
      trigger: true
    - put: deliver-capi-stories
      params:
        repos:
        - capi-release/src/cloud_controller_ng
        - capi-release/src/code.cloudfoundry.org/tps
        - capi-release/src/code.cloudfoundry.org/nsync
        - capi-release/src/code.cloudfoundry.org/stager
        - capi-release

- name: merge-capi-release-master
  serial: true
  plan:
  - aggregate:
    - get: capi-ci
    - get: capi-release-master
      passed: [ship-it]
      trigger: true
    - get: capi-release
      resource: capi-release-develop
  - task: merge-master-into-develop
    file: capi-ci/ci/git/merge_master_into_develop.yml
  - put: capi-release-develop
    params:
      repository: merged/capi-release

- name: bump-ci-passed
  serial: true
  plan:
  - get: capi-release
    resource: capi-release-develop
    passed:
      - elsa-mysql-s3-bypass
      - mulan-postgres-webdav-bridge
      - kiki-back-compat-migrations
    trigger: true
  - get: capi-release-tarball
    passed:
      - elsa-mysql-s3-bypass
      - mulan-postgres-webdav-bridge
      - kiki-back-compat-migrations
  - put: capi-release-ci-passed
    params:
      repository: capi-release

- name: mssql-unit-tests
  plan:
  - aggregate:
    - get: cloud_controller_ng
      resource: cloud_controller_ng_sql_server
      trigger: true
    - get: capi-ci
  - task: run-cc-unit-tests-mssql
    privileged: true # required to run mssql in nested docker container
    file: capi-ci/ci/test-unit/run_cc_unit_tests.yml
    params:
      DB: mssql

- name: ripley-mssql
  serial: true
  plan:
  - aggregate:
    - get: cloud_controller_ng
      resource: cloud_controller_ng_sql_server
      trigger: true
      passed:
      - mssql-unit-tests
    - get: capi-ci
    - get: capi-ci-private
    - get: gcp-stemcell
    - get: cf-deployment
    - get: capi-release
      resource: capi-release-develop
    - get: version
      resource: version-sql-server
      params:
        pre: rc
    - get: ripley-integration-configs
    - get: cf-deployment-concourse-tasks
    - get: cats-concourse-task
    - get: cf-acceptance-tests
  - put: version
    resource: version-sql-server
    params:
      file: version/version
  - task: create-release-tarball
    file: capi-ci/ci/bosh/create_capi_release.yml
    params:
      CC_BRANCH: pivotal-sqlserversupport
  - put: azure-terraform
    params:
      env_name: leia
      terraform_source: capi-ci/terraform/azure-ms-sql/
      vars:
        subscription_id: {{azure_subscription_id}}
        client_id: {{azure_client_id}}
        client_secret: {{azure_client_secret}}
        tenant_id: {{azure_tenant_id}}
        resource_group: {{azure_resource_group}}
        db_name: {{azure_db_name}}
        db_admin_user: {{azure_db_admin_user}}
        db_admin_password: {{azure_db_admin_password}}
  - task: extract-bbl-environment
    file: capi-ci/ci/bbl-tasks/extract_bbl_environment.yml
    params:
      ENV_NAME: ripley
  - put: ripley-deployment
    params:
      source_file: environment/metadata
      manifest: cf-deployment/cf-deployment.yml
      stemcells:
      - gcp-stemcell/stemcell.tgz
      releases:
      - created-capi-release/*.tgz
      vars:
        system_domain: *ripley-domain
      vars_files:
      - azure-terraform/metadata
      ops_files:
      - cf-deployment/operations/scale-to-one-az.yml
      - cf-deployment/operations/use-postgres.yml
      - capi-ci/cf-deployment-operations/use-ms-sql-azure.yml
      - capi-ci/cf-deployment-operations/skip-cert-verify.yml
      - capi-ci/cf-deployment-operations/use-latest-capi.yml
  - task: download-vars-store
    output_mapping:
      destination-directory: ripley-deployment-vars
    file: capi-ci/ci/gcs/download-from-gcs.yml
    params:
      GCP_JSON_KEY: {{ripley_gcp_json_key}}
      GCP_BUCKET: {{ripley_bosh_vars_bucket}}
      GCP_PATH: bosh
  - task: updated-integration-configs
    file: cf-deployment-concourse-tasks/update-integration-configs/task.yml
    input_mapping:
      vars-store: ripley-deployment-vars
      integration-configs: ripley-integration-configs
    params:
      CATS_INTEGRATION_CONFIG_FILE: "ripley/cats_integration_config.json"
      VARS_STORE_FILE: "vars-store.yml"
      SYSTEM_DOMAIN: *ripley-domain
    ensure:
      put: ripley-integration-configs
      params:
        repository: updated-integration-configs
        rebase: true
  - task: enable-feature-flags
    file: cf-deployment-concourse-tasks/set-feature-flags/task.yml
    input_mapping:
      vars-store: ripley-deployment-vars
    params:
      SYSTEM_DOMAIN: *ripley-domain
      VARS_STORE_FILE: "vars-store.yml"
  - task: acceptance-tests
    file: cats-concourse-task/task.yml
    input_mapping:
      integration-config: updated-integration-configs
    params:
      NODES: 6
      CONFIG_FILE_PATH: "ripley/cats_integration_config.json"
